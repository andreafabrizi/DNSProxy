####  Valid vcl_* methods are:
####  	vcl_backend_error
####  	vcl_backend_fetch
####  	vcl_backend_response
####  	vcl_deliver
####  	vcl_fini
####  	vcl_hash
####  	vcl_hit
####  	vcl_init
####  	vcl_miss
####  	vcl_pass
####  	vcl_pipe
####  	vcl_purge
####  	vcl_recv
####  	vcl_synth

vcl 4.0;
import directors;

probe my_probe {
  .url       = "/nslookup.php";
  .interval  = 20s;
  .expected_response=200; 
  .timeout   = 3s;
  .window    = 3;
  .threshold = 2;
  .initial   = 1;
}

backend default {
    .host = "127.0.0.1";
    .port = "8080";
    #.probe = my_probe;
}

backend fantuznet {
    .host = "fantuz.net";
    .port = "80";
    #.probe = my_probe;
    #.connect_timeout = 2s;
    #.first_byte_timeout = 5s;
    #.between_bytes_timeout = 2s;
}

backend f1 {
    .host = "104.27.132.199";
    .port = "80";
    .probe = my_probe;
    .connect_timeout = 2s;
    .first_byte_timeout = 5s;
    .between_bytes_timeout = 2s;
}

backend f2 {
    .host = "104.27.133.199";
    .port = "80";
    .probe = my_probe;
    .connect_timeout = 2s;
    .first_byte_timeout = 5s;
    .between_bytes_timeout = 2s;
}

#backend www {
#    #.host = "bonapp.world";
#    .host = "vnc.fantuz.shop";
#    .port = "http";
#    .connect_timeout = 2s;
#    .first_byte_timeout = 5s;
#    .between_bytes_timeout = 2s;
#}

sub vcl_init {
    new radirector = directors.random();
        radirector.add_backend(fantuznet, 1.0);
        radirector.add_backend(f1, 1.0);
        radirector.add_backend(f2, 1.0);
        radirector.add_backend(default, 1.0);

#    new vdir = directors.round_robin();
#        vdir.add_backend(fantuznet);
#        vdir.add_backend(default);

#    new hash = directors.hash();
#        hash.add_backend(fantuznet,1.0);
#        hash.add_backend(default,1.0);

#    new rr = directors.round_robin();
#        rr.add_backend(hash.backend(fantuznet));
#	rr.add_backend(hash.backend(default));
}

acl purge {
  "localhost";
  "192.168.3.0"/24;
  "192.168.1.0"/24;
}

###    # Happens before we check if we have this in cache already.
###    # Typically you clean up the request here, removing cookies you don't need,
###    # rewriting the request, etc.
## Legal returns are: "fail" "hash" "pass" "pipe" "purge" "synth" "vcl"
sub vcl_recv {

## This information is mainly important if you are running earlier versions of Varnish. From 4.0 and on, the backend fetch will happen in the background as long as you haven't disabled grace explicitly.
## When using a script to refresh or warm the cache, it can be desirable to make sure it is your script that is stuck waiting for the backend fetch, and not the next client visiting your site. You can use the req.hash_always_miss control variable to make sure this request will result in a cache miss and fetch from the backend.
## Downside of this method is that it will leave multiple copies of the same object in cache.
## Command to refresh cached front page
## GET -H 'X-REFRESH: DOIT' http://my.site.com/

    if (req.http.X-REFRESH) {
        # Force a cache miss
        set req.hash_always_miss = true;
    }

    #if ( req.http.host ~ "(intranet\.example\.com)$" && !(client.ip ~ offices) ) {
    #	error 403 "Access denied";
    #}
    set req.backend_hint = radirector.backend();

    if (req.url ~ "^/nslookup-out/") {
	#set req.http.host = regsub(req.http.host, "^www\.","");
	set req.http.host = "fantuz.net";
	set req.url = regsub(req.url, "^/nslookup-out/","/");
        set req.backend_hint = fantuznet;
    }
    #else {
    #    set req.backend_hint = default;
    #}
    if (req.method == "PURGE") {
        set req.backend_hint = default;

	if (!client.ip ~ purge) {
            return(synth(405,"Not allowed."));
        } else {
            #return(lookup);
	    return(purge);
        }
    }
    
    ## The following example redirects clients accessing http://foo.example.com/foo/bar to http://www.example.net/foo/bar using a  302 redirect (temporarily relocated).
    ## For permanent domain or hostname changes a  301 moved permanently may be more appropriate.
    ## Please note that some clients send the complete URL (including http://foo.example.com/) as req.url. In such cases you may want to normalize req.url.
    if (req.http.host == "foo.example.com") {
      # req.url will be passed as an argument to the error subroutine
      return(synth(750,req.url));
    }
}

## Legal returns are: "deliver" "fail" "miss" "pass" "restart" "synth"
sub vcl_hit {
  if (req.method == "PURGE") {
    #return(purge);
    return(synth(200,"Purged."));
  }
}

sub vcl_miss {
  if (req.method == "PURGE") {
    #return(purge);
    return(synth(200,"Purged."));
  }
}

sub vcl_synth {
##     if (resp.status == 799) {
##         set resp.status = 200;
##         set resp.http.Content-Type = "text/plain; charset=utf-8";
##         synthetic("You are " + client.ip);
##         return (deliver);
##     }
    if (resp.status == 799) {
        set resp.status = 200;
        set resp.http.Content-Type = "text/plain; charset=utf-8";
        synthetic("You are " + client.ip);
        return (deliver);
    }
}

## Some clients (including curl and LWP) submit the full URI including protocol and hostname in the first line of the request. In Varnish 4.0 this will get dissected into req.http.host and req.url, so further handling of this is not needed. In Varnish 3.0 and earlier, it will however all get picked up by req.url. The following rewrite normalizes it.

## sub vcl_recv {
##     ### clean out requests sent via curls -X mode and LWP
##     if (req.url ~ "^http://") {
##         set req.url = regsub(req.url, "http://[^/]*", "");
##     }
## 
##     ### remove double // in urls, 
##     ### /foo and /foo/ are the same url
##     set req.url = regsuball( req.url, "//", "/"      );
##     set req.url = regsub( req.url, "/([?])?$", "\1"  );
## }

#
#sub vcl_error {
#  if (obj.status == 750) {
#    # obj.response is the argument, originally req.url
#    set obj.http.Location = "http://www.example.net/" obj.response;
#    set obj.status = 302;
#    deliver;
#  }
#}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
    if (obj.hits > 0) {
            set resp.http.X-Cache = "HIT";
    } else {
            set resp.http.X-Cache = "MISS";
    }

    return(deliver);
}

#sub vcl_recv {
#  set req.http.host = "fantuz.net";
#}

#This is an example from a brilliant book: https://www.varnish-software.com/static/book/
#Hiding js requests to external domainsIf we need to do some CORS (http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) requests instead of our Javascript doing requests directly to external domain, we can do requests to our site, but with a specific URL. Then, on the Varnish level, we can redirect that request to external domain. In this case, Varnish will act like a proxy. This can be achieved with backend options.

#backend google {
# .host = "209.85.147.106";
# 
#.port = "80";
#}
#
#sub vcl_fetch {
# if (req.url ~ "^/masq") {
#   set req.backend = google;
#   set req.http.host = "www.google.com";
#   set req.url = regsub(req.url, "^/masq", "");
#   remove req.http.Cookie;
#   return(deliver);
# }
#}

# 
# Below is a commented-out copy of the default VCL logic.  If you
# redefine any of these subroutines, the built-in logic will be
# appended to your code.
# sub vcl_recv {
#     if (req.restarts == 0) {
# 	if (req.http.x-forwarded-for) {
# 	    set req.http.X-Forwarded-For =
# 		req.http.X-Forwarded-For + ", " + client.ip;
# 	} else {
# 	    set req.http.X-Forwarded-For = client.ip;
# 	}
#     }
#     if (req.request != "GET" &&
#       req.request != "HEAD" &&
#       req.request != "PUT" &&
#       req.request != "POST" &&
#       req.request != "TRACE" &&
#       req.request != "OPTIONS" &&
#       req.request != "DELETE") {
#         /* Non-RFC2616 or CONNECT which is weird. */
#         return (pipe);
#     }
#     if (req.request != "GET" && req.request != "HEAD") {
#         /* We only deal with GET and HEAD by default */
#         return (pass);
#     }
#     if (req.http.Authorization || req.http.Cookie) {
#         /* Not cacheable by default */
#         return (pass);
#     }
#     return (lookup);
# }
# 
# sub vcl_pipe {
#     # Note that only the first request to the backend will have
#     # X-Forwarded-For set.  If you use X-Forwarded-For and want to
#     # have it set for all requests, make sure to have:
#     # set bereq.http.connection = "close";
#     # here.  It is not set by default as it might break some broken web
#     # applications, like IIS with NTLM authentication.
#     return (pipe);
# }
# 
# sub vcl_pass {
#     return (pass);
# }
# 
# sub vcl_hash {
#     hash_data(req.url);
#     if (req.http.host) {
#         hash_data(req.http.host);
#     } else {
#         hash_data(server.ip);
#     }
#     return (hash);
# }
# 
# sub vcl_hit {
#     return (deliver);
# }
# 
# sub vcl_miss {
#     return (fetch);
# }

# sub vcl_fetch {
#     if (beresp.ttl <= 0s ||
#         beresp.http.Set-Cookie ||
#         beresp.http.Vary == "*") {
# 		/*
# 		 * Mark as "Hit-For-Pass" for the next 2 minutes
# 		 */
# 		set beresp.ttl = 120 s;
# 		return (hit_for_pass);
#     }
#     return (deliver);
# }
# 
# sub vcl_deliver {
#     return (deliver);
# }
# 
# sub vcl_error {
#     set obj.http.Content-Type = "text/html; charset=utf-8";
#     set obj.http.Retry-After = "5";
#     synthetic {"
# <?xml version="1.0" encoding="utf-8"?>
# <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
#  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
# <html>
#   <head>
#     <title>"} + obj.status + " " + obj.response + {"</title>
#   </head>
#   <body>
#     <h1>Error "} + obj.status + " " + obj.response + {"</h1>
#     <p>"} + obj.response + {"</p>
#     <h3>Guru Meditation:</h3>
#     <p>XID: "} + req.xid + {"</p>
#     <hr>
#     <p>Varnish cache server</p>
#   </body>
# </html>
# "};
#     return (deliver);
# }
# 
# sub vcl_init {
# 	return (ok);
# }
# 
# sub vcl_fini {
# 	return (ok);
# }

#director tsd client {
#    { .backend = foo; .weight = 100; }
#    { .backend = bar; .weight = 100; }
#}

#director b2 fallback/random/round-robin/hash {
# 	'acl', 'sub', 'backend', 'probe', 'import',  or 'vcl'

#director b2 client {
#  .retries = 5;
#  { .backend = fantuznet; .weight  = 7;}
#  { .backend = default; .weight  = 7;}
#}

#  {
#    // Or define them inline
#    .backend  = {
#      .host = "fs2";
#    }
#  .weight         = 3;
#  }

# The `client' director will select a backend based on `client.identity'.
# It's normally used to implement session stickiness but here we abuse it
# to try to send pairs of requests to the same TSD, in order to achieve a
# higher cache hit rate.  The UI sends queries first with a "&json" at the
# end, in order to get meta-data back about the results, and then it sends
# the same query again with "&png".  If the second query goes to a different
# TSD, then that TSD will have to fetch the data from HBase again.  Whereas
# if it goes to the same TSD that served the "&json" query, it'll hit the
# cache of that TSD and produce the PNG directly without using HBase.
#
# Note that we cannot use the `hash' director here, because otherwise Varnish
# would hash both the "&json" and the "&png" requests identically, and it
# would thus serve a cached JSON response to a "&png" request.

## director tsd client {
##     { .backend = foo; .weight = 100; }
##     { .backend = bar; .weight = 100; }
## }
## 
## sub vcl_recv {
##     set req.backend = tsd;
##     # Make sure we hit the same backend based on the URL requested,
##     # but ignore some parameters before hashing the URL.
##     set client.identity = regsuball(req.url, "&(o|ignore|png|json|html|y2?range|y2?label|y2?log|key|nokey)\b(=[^&]*)?", "");
## }
## 
## sub vcl_hash {
##     # Remove the `ignore' parameter from the URL we hash, so that two
##     # identical requests modulo that parameter will hit Varnish's cache.
##     hash_data(regsuball(req.url, "&ignore\b(=[^&]*)?", ""));
##     if (req.http.host) {
##         hash_data(req.http.host);
##     } else {
##         hash_data(server.ip);
##     }
##     return (hash);
## }

#director directorname dns {
#        .list = {
#                .host_header = "fantuz.net";
#                .port = "80";
#                .connect_timeout = 2s;
#                "192.168.15.0"/24;
#                "192.168.16.128"/25;
#        }
#        .ttl = 5m;
#        .suffix = "internal.example.net";
#}

#director b3 fallback {
#  { .backend = www1; }
#  { .backend = www2; } // will only be used if www1 is unhealthy.
#  { .backend = www3; } // will only be used if both www1 and www2
#}

# /*
#probe my_probe {
#  .url       = "/";
#  .interval  = 1s;
#  .timeout   = 0.2 s;
#  .window    = 3;
#  .threshold = 2;
#  .initial   = 1;
#}
#backend default {
#  .host  = 127.0.0.1;
#  .probe = my_probe;
#}
#backend server1 {
#  .host  = 192.168.8.21;
#  .probe = my_probe;
#}
#backend server2 {
#  .host  = 192.168.8.22;
#  .probe = my_probe;
#}
#backend server3 {
#  .host  = 192.168.8.23;
#  .probe = my_probe;
#}
#director server_pool round-robin {
#  { .backend = server1; }
#  { .backend = server2; }
#  { .backend = server3; }
#}
#
#sub vcl_recv {
#  if ( req.backend == default
#    && ! req.backend.healthy
#  ) {
#    set req.backend = server_pool;
#  }
#  /* Uncomment if you want to divert restarted requests to the server pool
#   * if (req.restarts > 0) {
#   *   set req.backend = server_pool;
#   * }
#   */
#}
# */

## Some backends send headers that tell varnish not to cache elements. Header examples are:
## 
##  Cache-Control: no-cache, no-store, max-age=0, must-revalidate
##  Pragma: no-cache
## To override these headers and still put the element into cache for 2 minutes, the following configuration may be used:
## 
## sub vcl_fetch {
##   if (beresp.ttl < 120s) {
##    set beresp.ttl = 120s;
##   }
## }

# Happens after we have read the response headers from the backend.
# Here you clean the response headers, removing silly Set-Cookie headers
# and other mistakes your backend does.
sub vcl_backend_response {
## Adding diagnostics on why there was a hit/miss
## You can use the snippet below to add extra diagnostic headers to your response indicating why something was a cache hit or miss. Of course, the conditions can vary based on your business logic, so extend and alter the below snippet to suit your needs.

    # Varnish determined the object was not cacheable
    if (beresp.ttl <= 0s) {
        set beresp.http.X-Cacheable = "NO:Not Cacheable";
    # You don't wish to cache content for logged in users
##    } elsif (req.http.Cookie ~ "(UserID|_session)") {
##        set beresp.http.X-Cacheable = "NO:Got Session";
        #return(hit_for_pass);
    # You are respecting the Cache-Control=private header from the backend
    } elsif (beresp.http.Cache-Control ~ "private") {
        set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        #return(hit_for_pass);
    # Varnish determined the object was cacheable
    } else {
        set beresp.http.X-Cacheable = "YES";
    }

    if (beresp.ttl < 120s) {
      set beresp.ttl = 120s;
      unset beresp.http.Cache-Control;
    }
}

